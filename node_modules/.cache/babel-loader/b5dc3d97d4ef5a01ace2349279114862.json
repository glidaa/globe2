{"ast":null,"code":"var _jsxFileName = \"/home/sourab/projects/React-JS-Three-JS-Boilerplate/src/Scenes/MainScene.component.js\";\nimport React from 'react';\nimport * as THREE from 'three';\nimport MetalSphere from '../Components/3D/MetalSphere.three';\nimport Loading from './../Components/Loading.component';\nimport { handleSceneResize, initEventListener } from './../Utils/sceneResize';\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class MainScene extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.initScene = () => {\n      //init Loading Manager\n      const loadingManager = new THREE.LoadingManager();\n\n      loadingManager.onLoad = () => {\n        this.setState({\n          loading: false\n        }, () => {});\n      }; //init Renderer\n\n\n      this.renderer = new THREE.WebGLRenderer({\n        antialias: true,\n        alpha: true\n      });\n      this.renderer.setPixelRatio(window.devicePixelRatio);\n      this.renderer.autoClear = false;\n      this.renderer.setClearColor(new THREE.Color(0x222222));\n      this.renderer.setSize(this.divRef.current.offsetWidth, this.divRef.current.offsetHeight);\n      this.divRef.current.appendChild(this.renderer.domElement); //init Scene\n\n      this.scene = new THREE.Scene();\n      this.scene.background = new THREE.Color(0x222222); //init Camera\n\n      this.camera = new THREE.PerspectiveCamera(30, this.divRef.current.offsetWidth / this.divRef.current.offsetHeight, 0.1, 1000);\n      this.camera.position.x = 30;\n      this.controls = new OrbitControls(this.camera, this.renderer.domElement); //Metal Sphere\n\n      let sphere = new MetalSphere().create(loadingManager);\n      this.scene.add(sphere); //Ambient Light\n\n      let ambientLight = new THREE.AmbientLight(0xFFFFFF);\n      ambientLight.intensity = 1;\n      this.scene.add(ambientLight);\n      hemiLight = new THREE.HemisphereLight(0xffeeb1, 0x080820, 4);\n      scene.add(hemiLight); //Directional Light\n\n      let directionalLight = new THREE.DirectionalLight(0xe8f7ff, 4);\n      directionalLight.position.set(5, 15, 70);\n      this.scene.add(directionalLight);\n      light = new THREE.SpotLight(0xffa95c, 4);\n      light.position.set(-50, 50, 50);\n      light.castShadow = true;\n      scene.add(light); //init Handle Resize\n\n      handleSceneResize(window, this.camera, this.renderer);\n      initEventListener(window); //Animation Loop\n\n      const animate = () => {\n        requestAnimationFrame(animate);\n        this.renderer.render(this.scene, this.camera);\n\n        if (sphere) {\n          let rotationRad = THREE.MathUtils.degToRad(.9);\n          sphere.rotateY(rotationRad);\n        }\n\n        light.position.set(camera.position.x + 10, camera.position.y + 10, camera.position.z + 10);\n      };\n\n      animate();\n    };\n\n    this.state = {\n      loading: this.props.loading ? true : false\n    }; //3D Scene components\n\n    this.divRef = /*#__PURE__*/React.createRef();\n    this.renderer = null;\n    this.camera = null;\n    this.scene = null;\n  }\n\n  componentDidMount() {\n    this.initScene();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"three-container\",\n        ref: this.divRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this), this.state.loading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 35\n      }, this) : '']\n    }, void 0, true);\n  }\n\n}","map":{"version":3,"sources":["/home/sourab/projects/React-JS-Three-JS-Boilerplate/src/Scenes/MainScene.component.js"],"names":["React","THREE","MetalSphere","Loading","handleSceneResize","initEventListener","OrbitControls","MainScene","Component","constructor","props","initScene","loadingManager","LoadingManager","onLoad","setState","loading","renderer","WebGLRenderer","antialias","alpha","setPixelRatio","window","devicePixelRatio","autoClear","setClearColor","Color","setSize","divRef","current","offsetWidth","offsetHeight","appendChild","domElement","scene","Scene","background","camera","PerspectiveCamera","position","x","controls","sphere","create","add","ambientLight","AmbientLight","intensity","hemiLight","HemisphereLight","directionalLight","DirectionalLight","set","light","SpotLight","castShadow","animate","requestAnimationFrame","render","rotationRad","MathUtils","degToRad","rotateY","y","z","state","createRef","componentDidMount"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as THREE from 'three';\nimport MetalSphere from '../Components/3D/MetalSphere.three';\nimport Loading from './../Components/Loading.component';\nimport { handleSceneResize, initEventListener } from './../Utils/sceneResize';\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\nexport default class MainScene extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loading: this.props.loading ? true : false,\n        }\n        //3D Scene components\n        this.divRef = React.createRef();\n        this.renderer = null;\n        this.camera = null;\n        this.scene = null;\n    }\n\n    componentDidMount() {\n        this.initScene();\n    }\n    initScene = () => {\n        //init Loading Manager\n        const loadingManager = new THREE.LoadingManager();\n        loadingManager.onLoad = () => {\n            this.setState({ loading: false }, () => { })\n        }\n\n        //init Renderer\n        this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n        this.renderer.setPixelRatio(window.devicePixelRatio);\n        this.renderer.autoClear = false;\n        this.renderer.setClearColor(new THREE.Color(0x222222));\n        this.renderer.setSize(this.divRef.current.offsetWidth, this.divRef.current.offsetHeight);\n        this.divRef.current.appendChild(this.renderer.domElement);\n\n        //init Scene\n        this.scene = new THREE.Scene();\n        this.scene.background = new THREE.Color(0x222222);\n\n        //init Camera\n        this.camera = new THREE.PerspectiveCamera(30, this.divRef.current.offsetWidth / this.divRef.current.offsetHeight, 0.1, 1000);\n        this.camera.position.x = 30;\n        this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n        //Metal Sphere\n        let sphere = new MetalSphere().create(loadingManager);\n        this.scene.add(sphere);\n\n        //Ambient Light\n        let ambientLight = new THREE.AmbientLight(0xFFFFFF);\n        ambientLight.intensity = 1;\n        this.scene.add(ambientLight);\n        hemiLight = new THREE.HemisphereLight(0xffeeb1, 0x080820, 4);\n        scene.add(hemiLight);\n        //Directional Light\n        let directionalLight = new THREE.DirectionalLight(0xe8f7ff, 4);\n        directionalLight.position.set(5, 15, 70);\n        this.scene.add(directionalLight);\n        \n\n        light = new THREE.SpotLight(0xffa95c,4);\n        light.position.set(-50,50,50);\n        light.castShadow = true;\n        scene.add( light );\n        //init Handle Resize\n        handleSceneResize(window, this.camera, this.renderer)\n        initEventListener(window);\n\n        //Animation Loop\n        const animate = () => {\n            requestAnimationFrame(animate);\n            this.renderer.render(this.scene, this.camera);\n            if (sphere) {\n                let rotationRad = THREE.MathUtils.degToRad(.9);\n                sphere.rotateY(rotationRad);\n               \n            }\n            light.position.set( \n                camera.position.x + 10,\n                camera.position.y + 10,\n                camera.position.z + 10,\n              );\n\n        }\n        animate();\n    }\n\n    render() {\n        return (<>\n            <div className=\"three-container\" ref={this.divRef}></div>\n            {this.state.loading ? <Loading /> : ''}\n        </>)\n\n    }\n}"]},"metadata":{},"sourceType":"module"}