{"ast":null,"code":"var _jsxFileName = \"/home/sourab/projects/React-JS-Three-JS-Boilerplate/src/Scenes/MainScene.component.js\";\nimport React from 'react';\nimport * as THREE from 'three';\nimport MetalSphere from '../Components/3D/MetalSphere.three';\nimport Loading from './../Components/Loading.component';\nimport { handleSceneResize, initEventListener } from './../Utils/sceneResize';\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\nimport { Coordinates } from '../Coordinates';\nimport fragment from '../shaders/fragment.glsl';\nimport vertex from '../shaders/vertex.glsl';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class MainScene extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.initScene = () => {\n      //init Loading Manager\n      const loadingManager = new THREE.LoadingManager();\n\n      loadingManager.onLoad = () => {\n        this.setState({\n          loading: false\n        }, () => {});\n      }; //init Renderer\n\n\n      this.renderer = new THREE.WebGLRenderer({\n        antialias: true,\n        alpha: true\n      });\n      this.renderer.setPixelRatio(window.devicePixelRatio);\n      this.renderer.autoClear = false;\n      this.renderer.setClearColor(new THREE.Color(0x222222));\n      this.renderer.setSize(this.divRef.current.offsetWidth, this.divRef.current.offsetHeight);\n      this.divRef.current.appendChild(this.renderer.domElement); //init Scene\n\n      this.scene = new THREE.Scene();\n      this.scene.background = new THREE.Color(0x222222); //init Camera\n\n      this.camera = new THREE.PerspectiveCamera(7, this.divRef.current.offsetWidth / this.divRef.current.offsetHeight, 0.1, 1000);\n      this.camera.position.x = 30;\n      this.controls = new OrbitControls(this.camera, this.renderer.domElement); //Model\n\n      let sphere = new MetalSphere().create(loadingManager);\n      this.scene.add(sphere); // Ambient Light\n\n      let ambientLight = new THREE.AmbientLight(0xFFFFFF);\n      ambientLight.intensity = 1;\n      this.scene.add(ambientLight);\n      let hemiLight = new THREE.HemisphereLight(0xffeeb1, 0x080820, 4);\n      this.scene.add(hemiLight); //Directional Light\n\n      let directionalLight = new THREE.DirectionalLight(0xe8f7ff, 4);\n      directionalLight.position.set(5, 15, 70);\n      this.scene.add(directionalLight); //SpotLight\n\n      let light = new THREE.SpotLight(0xffa95c, 4);\n      light.position.set(-50, 50, 50);\n      light.castShadow = true;\n      this.scene.add(light);\n\n      function Conversion(lat, lng) {\n        let phi = (90 - lat) * (Math.PI / 180);\n        let theta = (lng + 180) * (Math.PI / 180);\n        let x = -(Math.sin(phi) * Math.cos(theta));\n        let y = Math.sin(phi) * Math.sin(theta);\n        let z = Math.cos(phi);\n        return {\n          x,\n          y,\n          z\n        };\n      }\n\n      for (let i = 0; i < Coordinates.length; i++) {\n        let pos = Conversion(Coordinates[i].lat, Coordinates[i].lng);\n        let mesh = new THREE.Mesh(new THREE.SphereBufferGeometry(0.01, 1, 1), new THREE.MeshBasicMaterial({\n          color: \"blue\"\n        }));\n        mesh.position.set(pos.x, pos.y, pos.z);\n        this.scene.add(mesh);\n\n        if (i < Coordinates.length - 1) {\n          let pos1 = Conversion(Coordinates[i + 1].lat, Coordinates[i + 1].lng);\n          this.ConnectingLines(pos, pos1);\n        }\n      } //init Handle Resize\n\n\n      handleSceneResize(window, this.camera, this.renderer);\n      initEventListener(window);\n      this.addObjects();\n\n      const animate = () => {\n        // if(!this.isPlaying) return;\n        // this.time +=0.05;\n        // this.materialShader.uniforms.time.value = this.time;\n        requestAnimationFrame(animate);\n        this.renderer.render(this.scene, this.camera);\n\n        if (this.scene) {\n          let rotationRad = THREE.MathUtils.degToRad(.1);\n          this.scene.rotateY(rotationRad);\n        }\n\n        light.position.set(this.camera.position.x + 10, this.camera.position.y + 10, this.camera.position.z + 10);\n        light.shadow.bias = -0.0001;\n        light.shadow.mapSize.width = 1024 * 4;\n        light.shadow.mapSize.height = 1024 * 4;\n      };\n\n      animate();\n    };\n\n    this.state = {\n      loading: this.props.loading ? true : false\n    }; //3D Scene components\n\n    this.divRef = /*#__PURE__*/React.createRef();\n    this.renderer = null;\n    this.camera = null;\n    this.scene = null;\n    this.time = 0;\n    this.isPlaying = true;\n    this.addObject = null;\n  }\n\n  componentDidMount() {\n    this.initScene();\n  }\n\n  addObjects() {\n    this.materialShaders = new THREE.ShaderMaterial({\n      extensions: {\n        derivatives: \"#extension GL_OES_standard_derivatives: enable\"\n      },\n      side: THREE.DoubleSide,\n      uniforms: {\n        time: {\n          value: 0\n        },\n        resolutiotion: {\n          value: new THREE.Vector4()\n        }\n      },\n      vertexShader: vertex,\n      fragmentShader: fragment\n    });\n  }\n\n  ConnectingLines(p1, p2) {\n    let v1 = new THREE.Vector3(p1.x, p1.y, p1.z);\n    let v2 = new THREE.Vector3(p2.x, p2.y, p2.z);\n    let points = [];\n\n    for (let i = 0; i <= 20; i++) {\n      let p = new THREE.Vector3().lerpVectors(v1, v2, i / 20);\n      p.normalize();\n      p.multiplyScalar(1 + 0.2 * Math.sin(Math.PI * i / 20));\n      points.push(p);\n    }\n\n    ;\n    const path = new THREE.CatmullRomCurve3(points);\n    const geometry = new THREE.TubeGeometry(path, 20, 0.02, 8, false); // const material = new THREE.LineBasicMaterial( {\n    //     color: \"pink\",\n    //     linewidth: 1,\n    //     linecap: 'round', //ignored by WebGLRenderer\n    //     linejoin:  'round', //ignored by WebGLRenderer\n    //     // material:materialShader\n    // } )\n\n    const material = this.materialShaders;\n    const mesh = new THREE.Mesh(geometry, material);\n    this.scene.add(mesh);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"three-container\",\n        ref: this.divRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 13\n      }, this), this.state.loading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 35\n      }, this) : '']\n    }, void 0, true);\n  }\n\n}","map":{"version":3,"sources":["/home/sourab/projects/React-JS-Three-JS-Boilerplate/src/Scenes/MainScene.component.js"],"names":["React","THREE","MetalSphere","Loading","handleSceneResize","initEventListener","OrbitControls","Coordinates","fragment","vertex","MainScene","Component","constructor","props","initScene","loadingManager","LoadingManager","onLoad","setState","loading","renderer","WebGLRenderer","antialias","alpha","setPixelRatio","window","devicePixelRatio","autoClear","setClearColor","Color","setSize","divRef","current","offsetWidth","offsetHeight","appendChild","domElement","scene","Scene","background","camera","PerspectiveCamera","position","x","controls","sphere","create","add","ambientLight","AmbientLight","intensity","hemiLight","HemisphereLight","directionalLight","DirectionalLight","set","light","SpotLight","castShadow","Conversion","lat","lng","phi","Math","PI","theta","sin","cos","y","z","i","length","pos","mesh","Mesh","SphereBufferGeometry","MeshBasicMaterial","color","pos1","ConnectingLines","addObjects","animate","requestAnimationFrame","render","rotationRad","MathUtils","degToRad","rotateY","shadow","bias","mapSize","width","height","state","createRef","time","isPlaying","addObject","componentDidMount","materialShaders","ShaderMaterial","extensions","derivatives","side","DoubleSide","uniforms","value","resolutiotion","Vector4","vertexShader","fragmentShader","p1","p2","v1","Vector3","v2","points","p","lerpVectors","normalize","multiplyScalar","push","path","CatmullRomCurve3","geometry","TubeGeometry","material"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,WAAP,MAAwB,oCAAxB;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,QAAqD,wBAArD;AACA,SAASC,aAAT,QAA8B,8CAA9B;AACA,SAAQC,WAAR,QAA0B,gBAA1B;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;;;AAGA,eAAe,MAAMC,SAAN,SAAwBV,KAAK,CAACW,SAA9B,CAAwC;AACnDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAmBnBC,SAnBmB,GAmBP,MAAM;AACd;AACA,YAAMC,cAAc,GAAG,IAAId,KAAK,CAACe,cAAV,EAAvB;;AACAD,MAAAA,cAAc,CAACE,MAAf,GAAwB,MAAM;AAC1B,aAAKC,QAAL,CAAc;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAAd,EAAkC,MAAM,CAAG,CAA3C;AACH,OAFD,CAHc,CAOd;;;AACA,WAAKC,QAAL,GAAgB,IAAInB,KAAK,CAACoB,aAAV,CAAwB;AAAEC,QAAAA,SAAS,EAAE,IAAb;AAAmBC,QAAAA,KAAK,EAAE;AAA1B,OAAxB,CAAhB;AACA,WAAKH,QAAL,CAAcI,aAAd,CAA4BC,MAAM,CAACC,gBAAnC;AACA,WAAKN,QAAL,CAAcO,SAAd,GAA0B,KAA1B;AACA,WAAKP,QAAL,CAAcQ,aAAd,CAA4B,IAAI3B,KAAK,CAAC4B,KAAV,CAAgB,QAAhB,CAA5B;AACA,WAAKT,QAAL,CAAcU,OAAd,CAAsB,KAAKC,MAAL,CAAYC,OAAZ,CAAoBC,WAA1C,EAAuD,KAAKF,MAAL,CAAYC,OAAZ,CAAoBE,YAA3E;AACA,WAAKH,MAAL,CAAYC,OAAZ,CAAoBG,WAApB,CAAgC,KAAKf,QAAL,CAAcgB,UAA9C,EAbc,CAed;;AACA,WAAKC,KAAL,GAAa,IAAIpC,KAAK,CAACqC,KAAV,EAAb;AACA,WAAKD,KAAL,CAAWE,UAAX,GAAwB,IAAItC,KAAK,CAAC4B,KAAV,CAAgB,QAAhB,CAAxB,CAjBc,CAmBd;;AACA,WAAKW,MAAL,GAAc,IAAIvC,KAAK,CAACwC,iBAAV,CAA4B,CAA5B,EAA+B,KAAKV,MAAL,CAAYC,OAAZ,CAAoBC,WAApB,GAAkC,KAAKF,MAAL,CAAYC,OAAZ,CAAoBE,YAArF,EAAmG,GAAnG,EAAwG,IAAxG,CAAd;AACA,WAAKM,MAAL,CAAYE,QAAZ,CAAqBC,CAArB,GAAyB,EAAzB;AACA,WAAKC,QAAL,GAAgB,IAAItC,aAAJ,CAAkB,KAAKkC,MAAvB,EAA+B,KAAKpB,QAAL,CAAcgB,UAA7C,CAAhB,CAtBc,CAwBd;;AACA,UAAIS,MAAM,GAAG,IAAI3C,WAAJ,GAAkB4C,MAAlB,CAAyB/B,cAAzB,CAAb;AACA,WAAKsB,KAAL,CAAWU,GAAX,CAAeF,MAAf,EA1Bc,CA4Bd;;AACA,UAAIG,YAAY,GAAG,IAAI/C,KAAK,CAACgD,YAAV,CAAuB,QAAvB,CAAnB;AACAD,MAAAA,YAAY,CAACE,SAAb,GAAyB,CAAzB;AACA,WAAKb,KAAL,CAAWU,GAAX,CAAeC,YAAf;AACA,UAAIG,SAAS,GAAG,IAAIlD,KAAK,CAACmD,eAAV,CAA0B,QAA1B,EAAoC,QAApC,EAA8C,CAA9C,CAAhB;AACA,WAAKf,KAAL,CAAWU,GAAX,CAAeI,SAAf,EAjCc,CAmCd;;AACA,UAAIE,gBAAgB,GAAG,IAAIpD,KAAK,CAACqD,gBAAV,CAA2B,QAA3B,EAAqC,CAArC,CAAvB;AACAD,MAAAA,gBAAgB,CAACX,QAAjB,CAA0Ba,GAA1B,CAA8B,CAA9B,EAAiC,EAAjC,EAAqC,EAArC;AACA,WAAKlB,KAAL,CAAWU,GAAX,CAAeM,gBAAf,EAtCc,CAwCd;;AACA,UAAIG,KAAK,GAAG,IAAIvD,KAAK,CAACwD,SAAV,CAAoB,QAApB,EAA6B,CAA7B,CAAZ;AACAD,MAAAA,KAAK,CAACd,QAAN,CAAea,GAAf,CAAmB,CAAC,EAApB,EAAuB,EAAvB,EAA0B,EAA1B;AACAC,MAAAA,KAAK,CAACE,UAAN,GAAmB,IAAnB;AACA,WAAKrB,KAAL,CAAWU,GAAX,CAAgBS,KAAhB;;AAEA,eAASG,UAAT,CAAoBC,GAApB,EAAyBC,GAAzB,EAA6B;AACzB,YAAIC,GAAG,GAAG,CAAC,KAAGF,GAAJ,KAAUG,IAAI,CAACC,EAAL,GAAQ,GAAlB,CAAV;AACA,YAAIC,KAAK,GAAG,CAACJ,GAAG,GAAC,GAAL,KAAWE,IAAI,CAACC,EAAL,GAAQ,GAAnB,CAAZ;AAEA,YAAIrB,CAAC,GAAG,EAAEoB,IAAI,CAACG,GAAL,CAASJ,GAAT,IAAcC,IAAI,CAACI,GAAL,CAASF,KAAT,CAAhB,CAAR;AACA,YAAIG,CAAC,GAAIL,IAAI,CAACG,GAAL,CAASJ,GAAT,IAAcC,IAAI,CAACG,GAAL,CAASD,KAAT,CAAvB;AACA,YAAII,CAAC,GAAIN,IAAI,CAACI,GAAL,CAASL,GAAT,CAAT;AAEA,eAAM;AACFnB,UAAAA,CADE;AACCyB,UAAAA,CADD;AACIC,UAAAA;AADJ,SAAN;AAGH;;AAED,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG/D,WAAW,CAACgE,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AACzC,YAAIE,GAAG,GAAGb,UAAU,CAACpD,WAAW,CAAC+D,CAAD,CAAX,CAAeV,GAAhB,EAAqBrD,WAAW,CAAC+D,CAAD,CAAX,CAAeT,GAApC,CAApB;AAEA,YAAIY,IAAI,GAAG,IAAIxE,KAAK,CAACyE,IAAV,CACP,IAAIzE,KAAK,CAAC0E,oBAAV,CAA+B,IAA/B,EAAqC,CAArC,EAAwC,CAAxC,CADO,EAEP,IAAI1E,KAAK,CAAC2E,iBAAV,CAA4B;AAACC,UAAAA,KAAK,EAAC;AAAP,SAA5B,CAFO,CAAX;AAIAJ,QAAAA,IAAI,CAAC/B,QAAL,CAAca,GAAd,CAAkBiB,GAAG,CAAC7B,CAAtB,EAAwB6B,GAAG,CAACJ,CAA5B,EAA8BI,GAAG,CAACH,CAAlC;AACA,aAAKhC,KAAL,CAAWU,GAAX,CAAe0B,IAAf;;AACA,YAAGH,CAAC,GAAC/D,WAAW,CAACgE,MAAZ,GAAmB,CAAxB,EAA0B;AACtB,cAAIO,IAAI,GAAGnB,UAAU,CAACpD,WAAW,CAAC+D,CAAC,GAAC,CAAH,CAAX,CAAiBV,GAAlB,EAAuBrD,WAAW,CAAC+D,CAAC,GAAC,CAAH,CAAX,CAAiBT,GAAxC,CAArB;AACA,eAAKkB,eAAL,CAAqBP,GAArB,EAAyBM,IAAzB;AACH;AAEJ,OAzEa,CA2Ed;;;AACA1E,MAAAA,iBAAiB,CAACqB,MAAD,EAAS,KAAKe,MAAd,EAAsB,KAAKpB,QAA3B,CAAjB;AACAf,MAAAA,iBAAiB,CAACoB,MAAD,CAAjB;AACA,WAAKuD,UAAL;;AAEA,YAAMC,OAAO,GAAG,MAAM;AAClB;AACA;AACA;AACAC,QAAAA,qBAAqB,CAACD,OAAD,CAArB;AACA,aAAK7D,QAAL,CAAc+D,MAAd,CAAqB,KAAK9C,KAA1B,EAAiC,KAAKG,MAAtC;;AACA,YAAI,KAAKH,KAAT,EAAgB;AACZ,cAAI+C,WAAW,GAAGnF,KAAK,CAACoF,SAAN,CAAgBC,QAAhB,CAAyB,EAAzB,CAAlB;AACA,eAAKjD,KAAL,CAAWkD,OAAX,CAAmBH,WAAnB;AAGH;;AACD5B,QAAAA,KAAK,CAACd,QAAN,CAAea,GAAf,CACI,KAAKf,MAAL,CAAYE,QAAZ,CAAqBC,CAArB,GAAyB,EAD7B,EAEI,KAAKH,MAAL,CAAYE,QAAZ,CAAqB0B,CAArB,GAAyB,EAF7B,EAGI,KAAK5B,MAAL,CAAYE,QAAZ,CAAqB2B,CAArB,GAAyB,EAH7B;AAKEb,QAAAA,KAAK,CAACgC,MAAN,CAAaC,IAAb,GAAoB,CAAC,MAArB;AACAjC,QAAAA,KAAK,CAACgC,MAAN,CAAaE,OAAb,CAAqBC,KAArB,GAA6B,OAAK,CAAlC;AACAnC,QAAAA,KAAK,CAACgC,MAAN,CAAaE,OAAb,CAAqBE,MAArB,GAA8B,OAAK,CAAnC;AACL,OApBD;;AAqBAX,MAAAA,OAAO;AACV,KAzHkB;;AAGf,SAAKY,KAAL,GAAa;AACT1E,MAAAA,OAAO,EAAE,KAAKN,KAAL,CAAWM,OAAX,GAAqB,IAArB,GAA4B;AAD5B,KAAb,CAHe,CAMf;;AACA,SAAKY,MAAL,gBAAc/B,KAAK,CAAC8F,SAAN,EAAd;AACA,SAAK1E,QAAL,GAAgB,IAAhB;AACA,SAAKoB,MAAL,GAAc,IAAd;AACA,SAAKH,KAAL,GAAa,IAAb;AACA,SAAK0D,IAAL,GAAY,CAAZ;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKpF,SAAL;AACH;;AAwGDkE,EAAAA,UAAU,GAAE;AACR,SAAKmB,eAAL,GAAwB,IAAIlG,KAAK,CAACmG,cAAV,CAAyB;AAC7CC,MAAAA,UAAU,EAAC;AACPC,QAAAA,WAAW,EAAC;AADL,OADkC;AAI7CC,MAAAA,IAAI,EAACtG,KAAK,CAACuG,UAJkC;AAK7CC,MAAAA,QAAQ,EAAC;AACLV,QAAAA,IAAI,EAAC;AAACW,UAAAA,KAAK,EAAC;AAAP,SADA;AAELC,QAAAA,aAAa,EAAC;AAACD,UAAAA,KAAK,EAAE,IAAIzG,KAAK,CAAC2G,OAAV;AAAR;AAFT,OALoC;AAS7CC,MAAAA,YAAY,EAAEpG,MAT+B;AAU7CqG,MAAAA,cAAc,EAAEtG;AAV6B,KAAzB,CAAxB;AAYH;;AAEDuE,EAAAA,eAAe,CAACgC,EAAD,EAAIC,EAAJ,EAAO;AAClB,QAAIC,EAAE,GAAG,IAAIhH,KAAK,CAACiH,OAAV,CAAkBH,EAAE,CAACpE,CAArB,EAAwBoE,EAAE,CAAC3C,CAA3B,EAA8B2C,EAAE,CAAC1C,CAAjC,CAAT;AACA,QAAI8C,EAAE,GAAG,IAAIlH,KAAK,CAACiH,OAAV,CAAkBF,EAAE,CAACrE,CAArB,EAAwBqE,EAAE,CAAC5C,CAA3B,EAA8B4C,EAAE,CAAC3C,CAAjC,CAAT;AACA,QAAI+C,MAAM,GAAG,EAAb;;AACA,SAAK,IAAI9C,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzB,UAAI+C,CAAC,GAAG,IAAIpH,KAAK,CAACiH,OAAV,GAAoBI,WAApB,CAAgCL,EAAhC,EAAoCE,EAApC,EAAwC7C,CAAC,GAAC,EAA1C,CAAR;AACA+C,MAAAA,CAAC,CAACE,SAAF;AACAF,MAAAA,CAAC,CAACG,cAAF,CAAiB,IAAI,MAAIzD,IAAI,CAACG,GAAL,CAASH,IAAI,CAACC,EAAL,GAAQM,CAAR,GAAU,EAAnB,CAAzB;AACA8C,MAAAA,MAAM,CAACK,IAAP,CAAYJ,CAAZ;AACH;;AAAA;AAID,UAAMK,IAAI,GAAG,IAAIzH,KAAK,CAAC0H,gBAAV,CAA2BP,MAA3B,CAAb;AACA,UAAMQ,QAAQ,GAAG,IAAI3H,KAAK,CAAC4H,YAAV,CAAuBH,IAAvB,EAA6B,EAA7B,EAAiC,IAAjC,EAAuC,CAAvC,EAA0C,KAA1C,CAAjB,CAdkB,CAelB;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,UAAMI,QAAQ,GAAG,KAAK3B,eAAtB;AAEA,UAAM1B,IAAI,GAAG,IAAIxE,KAAK,CAACyE,IAAV,CAAgBkD,QAAhB,EAA0BE,QAA1B,CAAb;AACA,SAAKzF,KAAL,CAAWU,GAAX,CAAgB0B,IAAhB;AAEH;;AAGDU,EAAAA,MAAM,GAAG;AACL,wBAAQ;AAAA,8BACJ;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAiC,QAAA,GAAG,EAAE,KAAKpD;AAA3C;AAAA;AAAA;AAAA;AAAA,cADI,EAEH,KAAK8D,KAAL,CAAW1E,OAAX,gBAAqB,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cAArB,GAAmC,EAFhC;AAAA,oBAAR;AAKH;;AA/KkD","sourcesContent":["import React from 'react';\nimport * as THREE from 'three';\nimport MetalSphere from '../Components/3D/MetalSphere.three';\nimport Loading from './../Components/Loading.component';\nimport { handleSceneResize, initEventListener } from './../Utils/sceneResize';\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\nimport {Coordinates} from '../Coordinates'\nimport fragment from '../shaders/fragment.glsl';\nimport vertex from '../shaders/vertex.glsl'\n\n\nexport default class MainScene extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loading: this.props.loading ? true : false,\n        }\n        //3D Scene components\n        this.divRef = React.createRef();\n        this.renderer = null;\n        this.camera = null;\n        this.scene = null;\n        this.time = 0;\n        this.isPlaying = true;\n        this.addObject = null\n    }\n\n    componentDidMount() {\n        this.initScene();\n    }\n    initScene = () => {\n        //init Loading Manager\n        const loadingManager = new THREE.LoadingManager();\n        loadingManager.onLoad = () => {\n            this.setState({ loading: false }, () => { })\n        }\n\n        //init Renderer\n        this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n        this.renderer.setPixelRatio(window.devicePixelRatio);\n        this.renderer.autoClear = false;\n        this.renderer.setClearColor(new THREE.Color(0x222222));\n        this.renderer.setSize(this.divRef.current.offsetWidth, this.divRef.current.offsetHeight);\n        this.divRef.current.appendChild(this.renderer.domElement);\n\n        //init Scene\n        this.scene = new THREE.Scene();\n        this.scene.background = new THREE.Color(0x222222);\n\n        //init Camera\n        this.camera = new THREE.PerspectiveCamera(7, this.divRef.current.offsetWidth / this.divRef.current.offsetHeight, 0.1, 1000);\n        this.camera.position.x = 30;\n        this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n\n        //Model\n        let sphere = new MetalSphere().create(loadingManager);\n        this.scene.add(sphere);\n\n        // Ambient Light\n        let ambientLight = new THREE.AmbientLight(0xFFFFFF);\n        ambientLight.intensity = 1;\n        this.scene.add(ambientLight);\n        let hemiLight = new THREE.HemisphereLight(0xffeeb1, 0x080820, 4);\n        this.scene.add(hemiLight);\n\n        //Directional Light\n        let directionalLight = new THREE.DirectionalLight(0xe8f7ff, 4);\n        directionalLight.position.set(5, 15, 70);\n        this.scene.add(directionalLight);\n        \n        //SpotLight\n        let light = new THREE.SpotLight(0xffa95c,4);\n        light.position.set(-50,50,50);\n        light.castShadow = true;\n        this.scene.add( light );\n        \n        function Conversion(lat, lng){\n            let phi = (90-lat)*(Math.PI/180);\n            let theta = (lng+180)*(Math.PI/180);\n\n            let x = -(Math.sin(phi)*Math.cos(theta))\n            let y = (Math.sin(phi)*Math.sin(theta))\n            let z = (Math.cos(phi))\n\n            return{\n                x, y, z\n            }\n        }\n\n        for (let i = 0; i < Coordinates.length; i++) {\n            let pos = Conversion(Coordinates[i].lat, Coordinates[i].lng);\n\n            let mesh = new THREE.Mesh(\n                new THREE.SphereBufferGeometry(0.01, 1, 1),\n                new THREE.MeshBasicMaterial({color:\"blue\"})\n            )\n            mesh.position.set(pos.x,pos.y,pos.z)\n            this.scene.add(mesh)\n            if(i<Coordinates.length-1){\n                let pos1 = Conversion(Coordinates[i+1].lat, Coordinates[i+1].lng);\n                this.ConnectingLines(pos,pos1)\n            }\n            \n        }\n\n        //init Handle Resize\n        handleSceneResize(window, this.camera, this.renderer)\n        initEventListener(window);\n        this.addObjects()\n\n        const animate = () => {\n            // if(!this.isPlaying) return;\n            // this.time +=0.05;\n            // this.materialShader.uniforms.time.value = this.time;\n            requestAnimationFrame(animate);\n            this.renderer.render(this.scene, this.camera );\n            if (this.scene) {\n                let rotationRad = THREE.MathUtils.degToRad(.1);\n                this.scene.rotateY(rotationRad);\n               \n               \n            }\n            light.position.set( \n                this.camera.position.x + 10,\n                this.camera.position.y + 10,\n                this.camera.position.z + 10,\n              );\n              light.shadow.bias = -0.0001;\n              light.shadow.mapSize.width = 1024*4;\n              light.shadow.mapSize.height = 1024*4;\n        }\n        animate();\n    }\n    addObjects(){\n        this.materialShaders =  new THREE.ShaderMaterial({\n            extensions:{\n                derivatives:\"#extension GL_OES_standard_derivatives: enable\"\n            },\n            side:THREE.DoubleSide,\n            uniforms:{\n                time:{value:0},\n                resolutiotion:{value: new THREE.Vector4()}\n            },\n            vertexShader: vertex,\n            fragmentShader: fragment\n        }) \n    }\n   \n    ConnectingLines(p1,p2){\n        let v1 = new THREE.Vector3(p1.x, p1.y, p1.z)\n        let v2 = new THREE.Vector3(p2.x, p2.y, p2.z)\n        let points = []\n        for (let i = 0; i <=20; i++) {\n            let p = new THREE.Vector3().lerpVectors(v1, v2, i/20)\n            p.normalize()\n            p.multiplyScalar(1 + 0.2*Math.sin(Math.PI*i/20)) \n            points.push(p)             \n        };\n    \n       \n        \n        const path = new THREE.CatmullRomCurve3(points)\n        const geometry = new THREE.TubeGeometry(path, 20, 0.02, 8, false)\n        // const material = new THREE.LineBasicMaterial( {\n        //     color: \"pink\",\n        //     linewidth: 1,\n        //     linecap: 'round', //ignored by WebGLRenderer\n        //     linejoin:  'round', //ignored by WebGLRenderer\n        //     // material:materialShader\n            \n        // } )\n        const material = this.materialShaders\n\n        const mesh = new THREE.Mesh( geometry, material );\n        this.scene.add( mesh );\n \n    }\n  \n\n    render() {\n        return (<>\n            <div className=\"three-container\" ref={this.divRef}></div>\n            {this.state.loading ? <Loading /> : ''}\n        </>)\n\n    }\n}"]},"metadata":{},"sourceType":"module"}