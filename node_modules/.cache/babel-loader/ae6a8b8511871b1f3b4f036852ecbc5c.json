{"ast":null,"code":"var _jsxFileName = \"/home/sourab/projects/React-JS-Three-JS-Boilerplate/src/Scenes/MainScene.component.js\";\nimport React from 'react';\nimport * as THREE from 'three';\nimport MetalSphere from '../Components/3D/MetalSphere.three';\nimport Loading from './../Components/Loading.component';\nimport { handleSceneResize, initEventListener } from './../Utils/sceneResize';\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\nimport { SpotLight } from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class MainScene extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.initScene = () => {\n      //init Loading Manager\n      const loadingManager = new THREE.LoadingManager();\n\n      loadingManager.onLoad = () => {\n        this.setState({\n          loading: false\n        }, () => {});\n      }; //init Renderer\n\n\n      this.renderer = new THREE.WebGLRenderer({\n        antialias: true,\n        alpha: true\n      });\n      this.renderer.setPixelRatio(window.devicePixelRatio);\n      this.renderer.autoClear = false;\n      this.renderer.setClearColor(new THREE.Color(0x222222));\n      this.renderer.setSize(this.divRef.current.offsetWidth, this.divRef.current.offsetHeight);\n      this.divRef.current.appendChild(this.renderer.domElement); //init Scene\n\n      this.scene = new THREE.Scene();\n      this.scene.background = new THREE.Color(0x222222); //init Camera\n\n      this.camera = new THREE.PerspectiveCamera(30, this.divRef.current.offsetWidth / this.divRef.current.offsetHeight, 0.1, 1000);\n      this.camera.position.x = 30;\n      this.controls = new OrbitControls(this.camera, this.renderer.domElement); //Metal Sphere\n\n      let sphere = new MetalSphere().create(loadingManager);\n      this.scene.add(sphere); //Ambient Light\n\n      let ambientLight = new THREE.AmbientLight(0xFFFFFF);\n      ambientLight.intensity = 1;\n      this.scene.add(ambientLight);\n      let hemiLight = new THREE.HemisphereLight(0xffeeb1, 0x080820, 4);\n      this.scene.add(hemiLight); //Directional Light\n\n      let directionalLight = new THREE.DirectionalLight(0xe8f7ff, 4);\n      directionalLight.position.set(5, 15, 70);\n      this.scene.add(directionalLight); //SpotLight\n\n      let light = new THREE.SpotLight(0xffa95c, 4);\n      light.position.set(-50, 50, 50);\n      light.castShadow = true;\n      this.scene.add(light); //pin\n\n      let mesh = new THREE.Mesh(new THREE.SphereBufferGeometry(0.1, 20, 20), new THREE.MeshBasicMaterial({\n        color: 0xff0000\n      }));\n      let point1 = {\n        lat: 35.6897,\n        lng: 139.6922\n      };\n      let point2 = {\n        lat: -6.2146,\n        lng: 106.8451\n      };\n      let lat = (90 - 35.6897) * Math.PI / 180;\n      let lng = (180 + 139.6922) * Math.PI / 180;\n      let x = -Math.sin(lat) * Math.cos(lng);\n      let y = Math.sin(lat) * Math.sin(lng);\n      let z = Math.cos(lat);\n      mesh.position.set(5, 0, 0);\n      this.scene.add(mesh); //init Handle Resize\n\n      handleSceneResize(window, this.camera, this.renderer);\n      initEventListener(window); //Animation Loop\n\n      const animate = () => {\n        requestAnimationFrame(animate);\n        this.renderer.render(this.scene, this.camera); // if (sphere,mesh) {\n        //     let rotationRad = THREE.MathUtils.degToRad(.3);\n        //     sphere.rotateY(rotationRad);\n        //     mesh.rotateY(rotationRad)\n        // }\n\n        light.position.set(this.camera.position.x + 10, this.camera.position.y + 10, this.camera.position.z + 10);\n        light.shadow.bias = -0.0001;\n        light.shadow.mapSize.width = 1024 * 4;\n        light.shadow.mapSize.height = 1024 * 4;\n      };\n\n      animate();\n    };\n\n    this.state = {\n      loading: this.props.loading ? true : false\n    }; //3D Scene components\n\n    this.divRef = /*#__PURE__*/React.createRef();\n    this.renderer = null;\n    this.camera = null;\n    this.scene = null;\n  }\n\n  componentDidMount() {\n    this.initScene();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"three-container\",\n        ref: this.divRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }, this), this.state.loading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 35\n      }, this) : '']\n    }, void 0, true);\n  }\n\n}","map":{"version":3,"sources":["/home/sourab/projects/React-JS-Three-JS-Boilerplate/src/Scenes/MainScene.component.js"],"names":["React","THREE","MetalSphere","Loading","handleSceneResize","initEventListener","OrbitControls","SpotLight","MainScene","Component","constructor","props","initScene","loadingManager","LoadingManager","onLoad","setState","loading","renderer","WebGLRenderer","antialias","alpha","setPixelRatio","window","devicePixelRatio","autoClear","setClearColor","Color","setSize","divRef","current","offsetWidth","offsetHeight","appendChild","domElement","scene","Scene","background","camera","PerspectiveCamera","position","x","controls","sphere","create","add","ambientLight","AmbientLight","intensity","hemiLight","HemisphereLight","directionalLight","DirectionalLight","set","light","castShadow","mesh","Mesh","SphereBufferGeometry","MeshBasicMaterial","color","point1","lat","lng","point2","Math","PI","sin","cos","y","z","animate","requestAnimationFrame","render","shadow","bias","mapSize","width","height","state","createRef","componentDidMount"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,WAAP,MAAwB,oCAAxB;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,QAAqD,wBAArD;AACA,SAASC,aAAT,QAA8B,8CAA9B;AACA,SAASC,SAAT,QAA0B,OAA1B;;;AACA,eAAe,MAAMC,SAAN,SAAwBR,KAAK,CAACS,SAA9B,CAAwC;AACnDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAgBnBC,SAhBmB,GAgBP,MAAM;AACd;AACA,YAAMC,cAAc,GAAG,IAAIZ,KAAK,CAACa,cAAV,EAAvB;;AACAD,MAAAA,cAAc,CAACE,MAAf,GAAwB,MAAM;AAC1B,aAAKC,QAAL,CAAc;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAAd,EAAkC,MAAM,CAAG,CAA3C;AACH,OAFD,CAHc,CAOd;;;AACA,WAAKC,QAAL,GAAgB,IAAIjB,KAAK,CAACkB,aAAV,CAAwB;AAAEC,QAAAA,SAAS,EAAE,IAAb;AAAmBC,QAAAA,KAAK,EAAE;AAA1B,OAAxB,CAAhB;AACA,WAAKH,QAAL,CAAcI,aAAd,CAA4BC,MAAM,CAACC,gBAAnC;AACA,WAAKN,QAAL,CAAcO,SAAd,GAA0B,KAA1B;AACA,WAAKP,QAAL,CAAcQ,aAAd,CAA4B,IAAIzB,KAAK,CAAC0B,KAAV,CAAgB,QAAhB,CAA5B;AACA,WAAKT,QAAL,CAAcU,OAAd,CAAsB,KAAKC,MAAL,CAAYC,OAAZ,CAAoBC,WAA1C,EAAuD,KAAKF,MAAL,CAAYC,OAAZ,CAAoBE,YAA3E;AACA,WAAKH,MAAL,CAAYC,OAAZ,CAAoBG,WAApB,CAAgC,KAAKf,QAAL,CAAcgB,UAA9C,EAbc,CAed;;AACA,WAAKC,KAAL,GAAa,IAAIlC,KAAK,CAACmC,KAAV,EAAb;AACA,WAAKD,KAAL,CAAWE,UAAX,GAAwB,IAAIpC,KAAK,CAAC0B,KAAV,CAAgB,QAAhB,CAAxB,CAjBc,CAmBd;;AACA,WAAKW,MAAL,GAAc,IAAIrC,KAAK,CAACsC,iBAAV,CAA4B,EAA5B,EAAgC,KAAKV,MAAL,CAAYC,OAAZ,CAAoBC,WAApB,GAAkC,KAAKF,MAAL,CAAYC,OAAZ,CAAoBE,YAAtF,EAAoG,GAApG,EAAyG,IAAzG,CAAd;AACA,WAAKM,MAAL,CAAYE,QAAZ,CAAqBC,CAArB,GAAyB,EAAzB;AACA,WAAKC,QAAL,GAAgB,IAAIpC,aAAJ,CAAkB,KAAKgC,MAAvB,EAA+B,KAAKpB,QAAL,CAAcgB,UAA7C,CAAhB,CAtBc,CAuBd;;AACA,UAAIS,MAAM,GAAG,IAAIzC,WAAJ,GAAkB0C,MAAlB,CAAyB/B,cAAzB,CAAb;AACA,WAAKsB,KAAL,CAAWU,GAAX,CAAeF,MAAf,EAzBc,CA2Bd;;AACA,UAAIG,YAAY,GAAG,IAAI7C,KAAK,CAAC8C,YAAV,CAAuB,QAAvB,CAAnB;AACAD,MAAAA,YAAY,CAACE,SAAb,GAAyB,CAAzB;AACA,WAAKb,KAAL,CAAWU,GAAX,CAAeC,YAAf;AACA,UAAIG,SAAS,GAAG,IAAIhD,KAAK,CAACiD,eAAV,CAA0B,QAA1B,EAAoC,QAApC,EAA8C,CAA9C,CAAhB;AACA,WAAKf,KAAL,CAAWU,GAAX,CAAeI,SAAf,EAhCc,CAkCd;;AACA,UAAIE,gBAAgB,GAAG,IAAIlD,KAAK,CAACmD,gBAAV,CAA2B,QAA3B,EAAqC,CAArC,CAAvB;AACAD,MAAAA,gBAAgB,CAACX,QAAjB,CAA0Ba,GAA1B,CAA8B,CAA9B,EAAiC,EAAjC,EAAqC,EAArC;AACA,WAAKlB,KAAL,CAAWU,GAAX,CAAeM,gBAAf,EArCc,CAuCd;;AACA,UAAIG,KAAK,GAAG,IAAIrD,KAAK,CAACM,SAAV,CAAoB,QAApB,EAA6B,CAA7B,CAAZ;AACA+C,MAAAA,KAAK,CAACd,QAAN,CAAea,GAAf,CAAmB,CAAC,EAApB,EAAuB,EAAvB,EAA0B,EAA1B;AACAC,MAAAA,KAAK,CAACC,UAAN,GAAmB,IAAnB;AACA,WAAKpB,KAAL,CAAWU,GAAX,CAAgBS,KAAhB,EA3Cc,CA6Cd;;AACA,UAAIE,IAAI,GAAG,IAAIvD,KAAK,CAACwD,IAAV,CACP,IAAIxD,KAAK,CAACyD,oBAAV,CAA+B,GAA/B,EAAoC,EAApC,EAAwC,EAAxC,CADO,EAEP,IAAIzD,KAAK,CAAC0D,iBAAV,CAA4B;AAACC,QAAAA,KAAK,EAAC;AAAP,OAA5B,CAFO,CAAX;AAKA,UAAIC,MAAM,GAAG;AACTC,QAAAA,GAAG,EAAC,OADK;AAETC,QAAAA,GAAG,EAAC;AAFK,OAAb;AAIA,UAAIC,MAAM,GAAG;AACTF,QAAAA,GAAG,EAAC,CAAC,MADI;AAETC,QAAAA,GAAG,EAAC;AAFK,OAAb;AAKA,UAAID,GAAG,GAAG,CAAC,KAAG,OAAJ,IAAaG,IAAI,CAACC,EAAlB,GAAqB,GAA/B;AACA,UAAIH,GAAG,GAAG,CAAC,MAAI,QAAL,IAAeE,IAAI,CAACC,EAApB,GAAuB,GAAjC;AAEA,UAAIzB,CAAC,GAAG,CAACwB,IAAI,CAACE,GAAL,CAASL,GAAT,CAAD,GAAeG,IAAI,CAACG,GAAL,CAASL,GAAT,CAAvB;AACA,UAAIM,CAAC,GAAGJ,IAAI,CAACE,GAAL,CAASL,GAAT,IAAcG,IAAI,CAACE,GAAL,CAASJ,GAAT,CAAtB;AACA,UAAIO,CAAC,GAAGL,IAAI,CAACG,GAAL,CAASN,GAAT,CAAR;AACAN,MAAAA,IAAI,CAAChB,QAAL,CAAca,GAAd,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB;AACA,WAAKlB,KAAL,CAAWU,GAAX,CAAeW,IAAf,EAnEc,CAsEd;;AACApD,MAAAA,iBAAiB,CAACmB,MAAD,EAAS,KAAKe,MAAd,EAAsB,KAAKpB,QAA3B,CAAjB;AACAb,MAAAA,iBAAiB,CAACkB,MAAD,CAAjB,CAxEc,CA0Ed;;AACA,YAAMgD,OAAO,GAAG,MAAM;AAClBC,QAAAA,qBAAqB,CAACD,OAAD,CAArB;AACA,aAAKrD,QAAL,CAAcuD,MAAd,CAAqB,KAAKtC,KAA1B,EAAiC,KAAKG,MAAtC,EAFkB,CAGlB;AACA;AACA;AACA;AAEA;;AACAgB,QAAAA,KAAK,CAACd,QAAN,CAAea,GAAf,CACI,KAAKf,MAAL,CAAYE,QAAZ,CAAqBC,CAArB,GAAyB,EAD7B,EAEI,KAAKH,MAAL,CAAYE,QAAZ,CAAqB6B,CAArB,GAAyB,EAF7B,EAGI,KAAK/B,MAAL,CAAYE,QAAZ,CAAqB8B,CAArB,GAAyB,EAH7B;AAKEhB,QAAAA,KAAK,CAACoB,MAAN,CAAaC,IAAb,GAAoB,CAAC,MAArB;AACArB,QAAAA,KAAK,CAACoB,MAAN,CAAaE,OAAb,CAAqBC,KAArB,GAA6B,OAAK,CAAlC;AACAvB,QAAAA,KAAK,CAACoB,MAAN,CAAaE,OAAb,CAAqBE,MAArB,GAA8B,OAAK,CAAnC;AACL,OAjBD;;AAkBAP,MAAAA,OAAO;AACV,KA9GkB;;AAGf,SAAKQ,KAAL,GAAa;AACT9D,MAAAA,OAAO,EAAE,KAAKN,KAAL,CAAWM,OAAX,GAAqB,IAArB,GAA4B;AAD5B,KAAb,CAHe,CAMf;;AACA,SAAKY,MAAL,gBAAc7B,KAAK,CAACgF,SAAN,EAAd;AACA,SAAK9D,QAAL,GAAgB,IAAhB;AACA,SAAKoB,MAAL,GAAc,IAAd;AACA,SAAKH,KAAL,GAAa,IAAb;AACH;;AAED8C,EAAAA,iBAAiB,GAAG;AAChB,SAAKrE,SAAL;AACH;;AAiGD6D,EAAAA,MAAM,GAAG;AACL,wBAAQ;AAAA,8BACJ;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAiC,QAAA,GAAG,EAAE,KAAK5C;AAA3C;AAAA;AAAA;AAAA;AAAA,cADI,EAEH,KAAKkD,KAAL,CAAW9D,OAAX,gBAAqB,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cAArB,GAAmC,EAFhC;AAAA,oBAAR;AAKH;;AAvHkD","sourcesContent":["import React from 'react';\nimport * as THREE from 'three';\nimport MetalSphere from '../Components/3D/MetalSphere.three';\nimport Loading from './../Components/Loading.component';\nimport { handleSceneResize, initEventListener } from './../Utils/sceneResize';\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\nimport { SpotLight } from 'three';\nexport default class MainScene extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loading: this.props.loading ? true : false,\n        }\n        //3D Scene components\n        this.divRef = React.createRef();\n        this.renderer = null;\n        this.camera = null;\n        this.scene = null;\n    }\n\n    componentDidMount() {\n        this.initScene();\n    }\n    initScene = () => {\n        //init Loading Manager\n        const loadingManager = new THREE.LoadingManager();\n        loadingManager.onLoad = () => {\n            this.setState({ loading: false }, () => { })\n        }\n\n        //init Renderer\n        this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n        this.renderer.setPixelRatio(window.devicePixelRatio);\n        this.renderer.autoClear = false;\n        this.renderer.setClearColor(new THREE.Color(0x222222));\n        this.renderer.setSize(this.divRef.current.offsetWidth, this.divRef.current.offsetHeight);\n        this.divRef.current.appendChild(this.renderer.domElement);\n\n        //init Scene\n        this.scene = new THREE.Scene();\n        this.scene.background = new THREE.Color(0x222222);\n\n        //init Camera\n        this.camera = new THREE.PerspectiveCamera(30, this.divRef.current.offsetWidth / this.divRef.current.offsetHeight, 0.1, 1000);\n        this.camera.position.x = 30;\n        this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n        //Metal Sphere\n        let sphere = new MetalSphere().create(loadingManager);\n        this.scene.add(sphere);\n\n        //Ambient Light\n        let ambientLight = new THREE.AmbientLight(0xFFFFFF);\n        ambientLight.intensity = 1;\n        this.scene.add(ambientLight);\n        let hemiLight = new THREE.HemisphereLight(0xffeeb1, 0x080820, 4);\n        this.scene.add(hemiLight);\n\n        //Directional Light\n        let directionalLight = new THREE.DirectionalLight(0xe8f7ff, 4);\n        directionalLight.position.set(5, 15, 70);\n        this.scene.add(directionalLight);\n        \n        //SpotLight\n        let light = new THREE.SpotLight(0xffa95c,4);\n        light.position.set(-50,50,50);\n        light.castShadow = true;\n        this.scene.add( light );\n\n        //pin\n        let mesh = new THREE.Mesh(\n            new THREE.SphereBufferGeometry(0.1, 20, 20),\n            new THREE.MeshBasicMaterial({color:0xff0000})\n        )\n\n        let point1 = {\n            lat:35.6897,\n            lng:139.6922\n        }\n        let point2 = {\n            lat:-6.2146,\n            lng:106.8451\n        }\n        \n        let lat = (90-35.6897)*Math.PI/180;\n        let lng = (180+139.6922)*Math.PI/180;\n\n        let x = -Math.sin(lat)*Math.cos(lng)\n        let y = Math.sin(lat)*Math.sin(lng)\n        let z = Math.cos(lat)\n        mesh.position.set(5, 0, 0)\n        this.scene.add(mesh)\n\n\n        //init Handle Resize\n        handleSceneResize(window, this.camera, this.renderer)\n        initEventListener(window);\n\n        //Animation Loop\n        const animate = () => {\n            requestAnimationFrame(animate);\n            this.renderer.render(this.scene, this.camera);\n            // if (sphere,mesh) {\n            //     let rotationRad = THREE.MathUtils.degToRad(.3);\n            //     sphere.rotateY(rotationRad);\n            //     mesh.rotateY(rotationRad)\n               \n            // }\n            light.position.set( \n                this.camera.position.x + 10,\n                this.camera.position.y + 10,\n                this.camera.position.z + 10,\n              );\n              light.shadow.bias = -0.0001;\n              light.shadow.mapSize.width = 1024*4;\n              light.shadow.mapSize.height = 1024*4;\n        }\n        animate();\n    }\n\n    render() {\n        return (<>\n            <div className=\"three-container\" ref={this.divRef}></div>\n            {this.state.loading ? <Loading /> : ''}\n        </>)\n\n    }\n}"]},"metadata":{},"sourceType":"module"}