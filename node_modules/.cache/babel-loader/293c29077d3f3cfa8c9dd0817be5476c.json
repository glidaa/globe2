{"ast":null,"code":"export var handleSceneResize=function handleSceneResize(window,camera,renderer,composer){//Resize renderer\nif(renderer&&window&&camera){camera.aspect=window.innerWidth/window.innerHeight;camera.updateProjectionMatrix();renderer.setSize(window.innerWidth,window.innerHeight);}if(composer&&window&&camera){camera.aspect=window.innerWidth/window.innerHeight;camera.updateProjectionMatrix();composer.setSize(window.innerWidth,window.innerHeight);}};export var initEventListener=function initEventListener(window){//Add event listener to window object\nif(window){window.addEventListener('resize',handleSceneResize);}};","map":{"version":3,"sources":["/Users/michaelcastleman/Documents/Personal/GLidaa/24 svg/globe2/src/Utils/sceneResize.js"],"names":["handleSceneResize","window","camera","renderer","composer","aspect","innerWidth","innerHeight","updateProjectionMatrix","setSize","initEventListener","addEventListener"],"mappings":"AAAA,MAAO,IAAMA,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,MAAD,CAASC,MAAT,CAAiBC,QAAjB,CAA0BC,QAA1B,CAAsC,CACnE;AACA,GAAID,QAAQ,EAAIF,MAAZ,EAAsBC,MAA1B,CAAkC,CAC9BA,MAAM,CAACG,MAAP,CAAgBJ,MAAM,CAACK,UAAP,CAAoBL,MAAM,CAACM,WAA3C,CACAL,MAAM,CAACM,sBAAP,GACAL,QAAQ,CAACM,OAAT,CAAiBR,MAAM,CAACK,UAAxB,CAAoCL,MAAM,CAACM,WAA3C,EACH,CACD,GAAIH,QAAQ,EAAIH,MAAZ,EAAsBC,MAA1B,CAAkC,CAC9BA,MAAM,CAACG,MAAP,CAAgBJ,MAAM,CAACK,UAAP,CAAoBL,MAAM,CAACM,WAA3C,CACAL,MAAM,CAACM,sBAAP,GACAJ,QAAQ,CAACK,OAAT,CAAiBR,MAAM,CAACK,UAAxB,CAAoCL,MAAM,CAACM,WAA3C,EACH,CAGJ,CAdM,CAgBP,MAAO,IAAMG,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACT,MAAD,CAAW,CACpC;AACA,GAAGA,MAAH,CAAU,CACNA,MAAM,CAACU,gBAAP,CAAwB,QAAxB,CAAkCX,iBAAlC,EACH,CACR,CALM","sourcesContent":["export const handleSceneResize = (window, camera, renderer,composer) =>{\n    //Resize renderer\n    if (renderer && window && camera) {\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n    if (composer && window && camera) {\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n        composer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n\n}\n\nexport const initEventListener = (window) =>{\n        //Add event listener to window object\n        if(window){\n            window.addEventListener('resize', handleSceneResize);\n        }\n}"]},"metadata":{},"sourceType":"module"}