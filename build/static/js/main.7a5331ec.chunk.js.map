{"version":3,"sources":["Assets/Textures/earth.jpg","Components/3D/MetalSphere.three.js","Components/Loading.component.js","Utils/sceneResize.js","Coordinates.js","shaders/fragment.glsl","shaders/vertex.glsl","Scenes/MainScene.component.js","App.js","reportWebVitals.js","index.js"],"names":["MetalSpshere","create","loadingManager","geometry","THREE","texture","load","metalTexture","material","map","metalness","roughness","emissive","Loading","className","React","Component","handleSceneResize","window","camera","renderer","composer","aspect","innerWidth","innerHeight","updateProjectionMatrix","setSize","Coordinates","lat","lng","MainScene","props","initScene","onLoad","setState","loading","antialias","alpha","setPixelRatio","devicePixelRatio","autoClear","setClearColor","divRef","current","offsetWidth","offsetHeight","appendChild","domElement","scene","background","position","x","controls","OrbitControls","sphere","MetalSphere","add","ambientLight","intensity","hemiLight","directionalLight","set","light","Conversion","phi","Math","PI","theta","sin","cos","y","z","castShadow","i","length","pos","mesh","color","pos1","ConnectingLines","addEventListener","initEventListener","addObjects","animate","isPlaying","time","materialShaders","uniforms","value","requestAnimationFrame","render","rotationRad","degToRad","rotateY","shadow","bias","mapSize","width","height","state","createRef","addObject","this","extensions","derivatives","side","resolutiotion","transparent","vertexShader","vertex","fragmentShader","fragment","p1","p2","v1","v2","points","p","lerpVectors","normalize","multiplyScalar","push","path","linewidth","linecap","linejoin","ref","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a5331ec.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/earth.8a0f75b7.jpg\";","import * as THREE from 'three';\nimport metalTexture from './../../Assets/Textures/earth.jpg';\n\nexport default class MetalSpshere{\n    \n    create = (loadingManager) => {\n        let geometry = new THREE.SphereBufferGeometry(1, 40, 40);\n        let loader = new THREE.TextureLoader(loadingManager);\n        let texture = loader.load(metalTexture);\n        let material = new THREE.MeshStandardMaterial({\n            map: texture,\n            metalness: .9,\n            roughness: .65,\n            emissive: 0x222529,\n        });\n\n        //Assign geometry and material to the mesh\n        let mesh = new THREE.Mesh(geometry, material);\n\n        //Return the mesh\n        return mesh;\n    }\n}","import React from 'react';\nimport './../Styles/loading.css';\n\nexport default class Loading extends React.Component{\n    render(){\n        return(<div className=\"loading\"><p>Loading...</p></div>)\n    }\n}","export const handleSceneResize = (window, camera, renderer,composer) =>{\n    //Resize renderer\n    if (renderer && window && camera) {\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n    if (composer && window && camera) {\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n        composer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n\n}\n\nexport const initEventListener = (window) =>{\n        //Add event listener to window object\n        if(window){\n            window.addEventListener('resize', handleSceneResize);\n        }\n}","let Toronto={\n    lat: 43.7417,\n    lng: -79.3733,\n}\nlet Ottawa={\n    lat:45.4247,\n    lng:-75.695\n}\nlet Vancouver={\n    lat:45.6366,\n    lng:-122.5967\n}\nlet Montreal={\n    lat:45.4536,\n    lng:-73.6472,\n}\nlet Calgary={\n    lat:51.05,\n    lng:-114.0667,\n}\nlet Victoria={\n    lat:48.4283,\n    lng:-123.3647\n}\nlet Quebec_City={\n    lat:46.8139,\n    lng:-71.2081\n}\nlet West_New_York={\n    lat:40.7856,\n    lng:-74.0093\n}\nlet Paris={\n    lat:33.6688,\n    lng:-95.546\n}\nlet London={\n    lat:39.8936,\n    lng:-83.4376,\n}\nlet Rome={\n    lat:41.8931,\n    lng:12.4828,\n}\nlet Florence={\n    lat:43.7714,\n    lng:11.2542,\n}\nlet Barcelona={\n    lat:41.3825,\n    lng:2.1769\n}\nlet Prague={\n    lat:50.0833,\n    lng:14.4167\n}\nlet Istanbul={\n    lat:41.01,\n    lng:28.9603\n}\nlet Antalya={\n    lat:36.9081,\n    lng:30.6956\n}\nlet İnegöl={\n    lat:40.0806,\n    lng:29.5097\n}\nlet Mumbai={\n    lat:-108.9667,\n    lng:72.8333\n}\nlet Chifeng={\n    lat:42.2663,\n    lng:118.9223\n}\nlet Tongliao={\n    lat:43.6172,\n    lng:122.264\n}\nlet Baotou={\n    lat:40.6562,\n    lng:109.8345\n}\nlet Hohhot={\n    lat:40.8151,\n    lng:111.6629,\n}\nlet Brisbane={\n    lat:-27.4678,\n    lng:153.0281\n}\nlet Perth={\n    lat:-31.9522,\n    lng:115.8589\n}\nlet Adelaide={\n    lat:-34.9289,\n    lng:138.6011\n}\nlet Canberra={\n    lat:-35.2931,\n    lng:149.1269\n}\nlet Anchorage={\n    lat:61.1508,\n    lng:-149.1091\n}\nlet Juneau={\n    lat:58.4546,\n    lng:-134.1739\n}\nlet Krathum_Baen={\n    lat:13.6519,\n    lng:100.2572\n}\nlet Lop_Buri={\n    lat:14.8,\n    lng:100.6269\n}\n\n\nexport const Coordinates = [\n     Toronto,\n     Ottawa,\n     Vancouver,\n     Montreal,\n     Calgary,\n     Victoria,\n     Quebec_City,\n     West_New_York,\n     Paris,\n     London,\n     Rome,\n     Florence,\n     Barcelona,\n     Prague,\n     Istanbul,\n     Antalya,\n     İnegöl,\n     Mumbai,\n     Chifeng,\n     Tongliao,\n     Baotou,\n     Hohhot,\n     Brisbane,\n     Perth,\n     Adelaide,\n     Canberra,\n     Anchorage,\n     Juneau,\n     Krathum_Baen,\n     Lop_Buri\n\n]","export default __webpack_public_path__ + \"static/media/fragment.4945f753.glsl\";","export default __webpack_public_path__ + \"static/media/vertex.a021ef4f.glsl\";","import React from 'react';\nimport * as THREE from 'three';\nimport MetalSphere from '../Components/3D/MetalSphere.three';\nimport Loading from './../Components/Loading.component';\nimport { handleSceneResize, initEventListener } from './../Utils/sceneResize';\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\nimport {Coordinates} from '../Coordinates'\nimport fragment from '../shaders/fragment.glsl';\nimport vertex from '../shaders/vertex.glsl'\n\n\nexport default class MainScene extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loading: this.props.loading ? true : false,\n        }\n        //3D Scene components\n        this.divRef = React.createRef();\n        this.renderer = null;\n        this.camera = null;\n        this.scene = null;\n        this.time = 0;\n        this.isPlaying = true;\n        this.addObject = null\n    }\n\n    componentDidMount() {\n        this.initScene();\n    }\n    initScene = () => {\n        //init Loading Manager\n        const loadingManager = new THREE.LoadingManager();\n        loadingManager.onLoad = () => {\n            this.setState({ loading: false }, () => { })\n        }\n\n        //init Renderer\n        this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\n        this.renderer.setPixelRatio(window.devicePixelRatio);\n        this.renderer.autoClear = false;\n        this.renderer.setClearColor(new THREE.Color(0x222222));\n        this.renderer.setSize(this.divRef.current.offsetWidth, this.divRef.current.offsetHeight);\n        this.divRef.current.appendChild(this.renderer.domElement);\n\n        //init Scene\n        this.scene = new THREE.Scene();\n        this.scene.background = new THREE.Color(0x222222);\n\n        //init Camera\n        this.camera = new THREE.PerspectiveCamera(7, this.divRef.current.offsetWidth / this.divRef.current.offsetHeight, 0.1, 1000);\n        this.camera.position.x = 30;\n        this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n\n        //Model\n        let sphere = new MetalSphere().create(loadingManager);\n        this.scene.add(sphere);\n\n        // Ambient Light\n        let ambientLight = new THREE.AmbientLight(0xFFFFFF);\n        ambientLight.intensity = 1;\n        this.scene.add(ambientLight);\n        let hemiLight = new THREE.HemisphereLight(0xffeeb1, 0x080820, 4);\n        this.scene.add(hemiLight);\n\n        //Directional Light\n        let directionalLight = new THREE.DirectionalLight(0xe8f7ff, 4);\n        directionalLight.position.set(5, 15, 70);\n        this.scene.add(directionalLight);\n        \n        //SpotLight\n        let light = new THREE.SpotLight(0xffa95c,4);\n        light.position.set(-50,50,50);\n        light.castShadow = true;\n        this.scene.add( light );\n        \n        function Conversion(lat, lng){\n            let phi = (90-lat)*(Math.PI/180);\n            let theta = (lng+180)*(Math.PI/180);\n\n            let x = -(Math.sin(phi)*Math.cos(theta))\n            let y = (Math.sin(phi)*Math.sin(theta))\n            let z = (Math.cos(phi))\n\n            return{\n                x, y, z\n            }\n        }\n\n        for (let i = 0; i < Coordinates.length; i++) {\n            let pos = Conversion(Coordinates[i].lat, Coordinates[i].lng);\n\n            let mesh = new THREE.Mesh(\n                new THREE.SphereBufferGeometry(0.01, 1, 1),\n                new THREE.MeshBasicMaterial({color:\"blue\"})\n            )\n            mesh.position.set(pos.x,pos.y,pos.z)\n            this.scene.add(mesh)\n            if(i<Coordinates.length-1){\n                let pos1 = Conversion(Coordinates[i+1].lat, Coordinates[i+1].lng);\n                this.ConnectingLines(pos,pos1)\n            }\n            \n        }\n\n        //init Handle Resize\n        handleSceneResize(window, this.camera, this.renderer)\n        initEventListener(window);\n        this.addObjects()\n\n        const animate = () => {\n            if(!this.isPlaying) return;\n            this.time +=0.05;\n            this.materialShaders.uniforms.time.value = this.time;\n            requestAnimationFrame(animate);\n            this.renderer.render(this.scene, this.camera );\n            if (this.scene) {\n                let rotationRad = THREE.MathUtils.degToRad(.1);\n                this.scene.rotateY(rotationRad);\n               \n               \n            }\n            light.position.set( \n                this.camera.position.x + 10,\n                this.camera.position.y + 10,\n                this.camera.position.z + 10,\n              );\n              light.shadow.bias = -0.0001;\n              light.shadow.mapSize.width = 1024*4;\n              light.shadow.mapSize.height = 1024*4;\n        }\n        animate();\n    }\n    stop(){\n        this.isPlaying = false\n    }\n    play(){\n        if(!this.isPlaying){\n            this.render()\n            this.isPlaying = true\n        }\n    }\n    addObjects(){\n        this.materialShaders =  new THREE.ShaderMaterial({\n            extensions:{\n                derivatives:\"#extension GL_OES_standard_derivatives: enable\"\n            },\n            side:THREE.DoubleSide,\n            uniforms:{\n                time:{value:0},\n                resolutiotion:{value: new THREE.Vector4()}\n            },\n            transparent:true,\n            vertexShader: vertex,\n            fragmentShader: fragment\n        }) \n    }\n   \n    ConnectingLines(p1,p2){\n        let v1 = new THREE.Vector3(p1.x, p1.y, p1.z)\n        let v2 = new THREE.Vector3(p2.x, p2.y, p2.z)\n        let points = []\n        for (let i = 0; i <=20; i++) {\n            let p = new THREE.Vector3().lerpVectors(v1, v2, i/20)\n            p.normalize()\n            p.multiplyScalar(1 + 0.2*Math.sin(Math.PI*i/20)) \n            points.push(p)             \n        };\n    \n       \n        \n        const path = new THREE.CatmullRomCurve3(points)\n        const geometry = new THREE.TubeBufferGeometry(path, 20, 0.005, 8, false)\n        const material = new THREE.LineBasicMaterial( {\n            color: \"pink\",\n            linewidth: 1,\n            linecap: 'round', //ignored by WebGLRenderer\n            linejoin:  'round', //ignored by WebGLRenderer\n            \n        } )\n        // const material = this.materialShaders\n\n        const mesh = new THREE.Mesh( geometry, material );\n        this.scene.add( mesh );\n \n    }\n  \n\n    render() {\n        return (<>\n            <div className=\"three-container\" ref={this.divRef}></div>\n            {this.state.loading ? <Loading /> : ''}\n        </>)\n\n    }\n}","import React from 'react';\nimport MainScene from './Scenes/MainScene.component';\nimport './Styles/main.css';\n\nexport default class App extends React.Component{\n  render(){\n    return(<>\n    <MainScene loading={true}/>\n    \n    </>)\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}